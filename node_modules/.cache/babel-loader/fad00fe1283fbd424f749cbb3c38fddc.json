{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nimport { getUsers, getUserById, deleteUserById } from './usersOperations';\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null,\n    currentUser: null\n  },\n  extraReducers: builder => {\n    builder.addCase(getUsers.pending, state => {\n      state.isLoading = true;\n    }).addCase(getUsers.fulfilled, (state, _ref) => {\n      let {\n        payload\n      } = _ref;\n      state.isLoading = false;\n      state.items = payload;\n      state.error = null;\n      state.currentUser = null;\n    }).addCase(getUsers.rejected, (state, _ref2) => {\n      let {\n        payload\n      } = _ref2;\n      state.isLoading = false;\n      state.error = payload;\n      state.currentUser = null;\n    }).addCase(getUserById.pending, state => {\n      state.isLoading = true;\n    }).addCase(getUserById.fulfilled, (state, _ref3) => {\n      let {\n        payload\n      } = _ref3;\n      state.isLoading = false;\n      state.currentUser = payload;\n      state.error = null;\n    }).addCase(getUserById.rejected, (state, _ref4) => {\n      let {\n        payload\n      } = _ref4;\n      state.isLoading = false;\n      state.currentUser = null;\n      state.error = payload;\n    }).addCase(deleteUserById.pending, state => {\n      state.isLoading = true;\n    }).addCase(deleteUserById.fulfilled, (state, _ref5) => {\n      let {\n        payload\n      } = _ref5;\n      state.isLoading = false;\n      const index = state.items.findIndex(item => item.id === payload);\n      state.items.splice(index, 1);\n      state.error = null;\n    }).addCase(deleteUserById.rejected, (state, _ref6) => {\n      let {\n        payload\n      } = _ref6;\n      state.isLoading = false;\n      state.currentUser = null;\n      state.error = payload;\n    });\n  }\n});\nexport const usersReducer = usersSlice.reducer;","map":{"version":3,"sources":["/Users/marinachuhlib/Desktop/GitHub/practice-react/src/redux/users/usersSlice.js"],"names":["createSlice","getUsers","getUserById","deleteUserById","usersSlice","name","initialState","items","isLoading","error","currentUser","extraReducers","builder","addCase","pending","state","fulfilled","payload","rejected","index","findIndex","item","id","splice","usersReducer","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\nimport { getUsers, getUserById, deleteUserById } from './usersOperations';\n\nconst usersSlice = createSlice({\n  name: 'users',\n  initialState: {\n    items: [],\n    isLoading: false,\n    error: null,\n    currentUser: null,\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(getUsers.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(getUsers.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        state.items = payload;\n        state.error = null;\n        state.currentUser = null;\n      })\n      .addCase(getUsers.rejected, (state, { payload }) => {\n        state.isLoading = false;\n        state.error = payload;\n        state.currentUser = null;\n      })\n      .addCase(getUserById.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(getUserById.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        state.currentUser = payload;\n        state.error = null;\n      })\n      .addCase(getUserById.rejected, (state, { payload }) => {\n        state.isLoading = false;\n        state.currentUser = null;\n        state.error = payload;\n      })\n      .addCase(deleteUserById.pending, state => {\n        state.isLoading = true;\n      })\n      .addCase(deleteUserById.fulfilled, (state, { payload }) => {\n        state.isLoading = false;\n        const index = state.items.findIndex(item => item.id === payload);\n        state.items.splice(index, 1);\n        state.error = null;\n      })\n      .addCase(deleteUserById.rejected, (state, { payload }) => {\n        state.isLoading = false;\n        state.currentUser = null;\n        state.error = payload;\n      });\n  },\n});\n\nexport const usersReducer = usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}